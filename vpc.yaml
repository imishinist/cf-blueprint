AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  HostedZoneName:
    Type: String
    Default: ''
  VPCCidr:
    Type: String
    Default: '172.20.0.0/16'
  PublicSubnetCidr:
    Type: String
    Default: '172.20.32.0/20'
  PublicSubnetCidrA:
    Type: String
    Default: '172.20.32.0/21'
  PublicSubnetCidrC:
    Type: String
    Default: '172.20.40.0/21'
  PrivateSubnetCidr:
    Type: String
    Default: '172.20.48.0/20'
  PrivateSubnetCidrA:
    Type: String
    Default: '172.20.48.0/21'
  PrivateSubnetCidrC:
    Type: String
    Default: '172.20.56.0/21'
Conditions:
  SpecifiedHostedZone: !Not [!Equals [!Ref HostedZoneName, ""]]
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-vpc"
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref PublicSubnetCidrA
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet-a"
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: !Ref PublicSubnetCidrC
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-subnet-c"
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "ap-northeast-1a"
      CidrBlock: !Ref PrivateSubnetCidrA
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-subnet-a"
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "ap-northeast-1c"
      CidrBlock: !Ref PrivateSubnetCidrC
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-subnet-c"
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-igw"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  NatGWEip:
    Type: AWS::EC2::EIP
  NatGW:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGWEip.AllocationId
      SubnetId: !Ref PublicSubnetA
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public"
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private"
  PublicIGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateNatGWRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGW
  PublicSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-public-acl"
  PublicNetworkAclAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PublicNetworkAcl
  PublicNetworkAclAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
      NetworkAclId: !Ref PublicNetworkAcl
  PublicNetworkAclAllowIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 500
      NetworkAclId: !Ref PublicNetworkAcl
  PublicNetworkAclEgressAllowHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
      NetworkAclId: !Ref PublicNetworkAcl
  PublicNetworkAclEgressAllowHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 120
      NetworkAclId: !Ref PublicNetworkAcl
  PublicNetworkAclEgressAllowSSH:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: !Ref PrivateSubnetCidr
      Egress: true
      PortRange:
        From: 22
        To: 22
      Protocol: 6
      RuleAction: allow
      RuleNumber: 130
      NetworkAclId: !Ref PublicNetworkAcl
  PublicNetworkAclAllowEphemeral:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 140
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      NetworkAclId: !Ref PublicNetworkAcl
  PublicSubnetNetworkAclAssociationC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      NetworkAclId: !Ref PublicNetworkAcl
  PrivateNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-private-acl"
  PrivateNetworkAclAllowIngress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 300
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateNetworkAclAllowEgressHTTP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 80
        To: 80
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateNetworkAclAllowEgressHTTPS:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 443
        To: 443
      Protocol: 6
      RuleAction: allow
      RuleNumber: 110
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateNetworkAclAllowEgress:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 300
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnetNetworkAclAssociationA:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref PrivateNetworkAcl
  PrivateSubnetNetworkAclAssociationC:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      NetworkAclId: !Ref PrivateNetworkAcl
  ApplicationSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "application security group"
  ApplicationSGIngressHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 80
      ToPort: 80
      IpProtocol: tcp
      GroupId: !GetAtt ApplicationSG.GroupId
      CidrIp: 0.0.0.0/0
  ApplicationSGIngressAltHTTP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 8080
      ToPort: 8080
      IpProtocol: tcp
      GroupId: !GetAtt ApplicationSG.GroupId
      SourceSecurityGroupId: !GetAtt ApplicationSG.GroupId
  ApplicationSGIngressHTTPS:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      FromPort: 443
      ToPort: 443
      IpProtocol: tcp
      GroupId: !GetAtt ApplicationSG.GroupId
      SourceSecurityGroupId: !GetAtt ApplicationSG.GroupId
Outputs:
  VPCID:
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
  PublicSubnetA:
    Value: !Ref PublicSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetA"
  PublicSubnetC:
    Value: !Ref PublicSubnetC
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnetC"
  PrivateSubnetA:
    Value: !Ref PrivateSubnetA
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetA"
  PrivateSubnetC:
    Value: !Ref PrivateSubnetC
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnetC"
  AppSGID:
    Value: !GetAtt ApplicationSG.GroupId
    Export:
      Name: !Sub "${AWS::StackName}-AppSGID"
